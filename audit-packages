#!/usr/bin/env node
/*
 * Process npm audit data.
 *
 * Return a non-zero exit value if auditing fails and zero otherwise.  With no
 * argument report critical advisories only.
 *
 * Note: `npm audit` uses package-lock or npm-shrinkwrap data, not
 * package.json.  To generate updated package lock files run `npm install`.
 *
 * Usage:
 *
 *   ./audit-packages [critical,high,moderate,low]
 *
 */

const os = require('os');
const { spawn } = require('child_process')

const isWin = os.platform() === 'win32'
const child = spawn(isWin ? 'npm.cmd' : 'npm', ['audit', '--json'])

let data  = ''

child.on('error', error => {
  console.error('command failed', error)
  process.exit(1)
})

child.stdout.setEncoding('utf8')

child.stdout.on('data', chunk => {
  data += chunk
})

child.stdout.on('end', () => {
  const advisories = filter(JSON.parse(data), process.argv[2])
  if (advisories.length) {
    console.log(JSON.stringify(advisories))
    process.exit(1)
  }
})

// return advisories filtering on severity
const filter = (report, severity = 'critical') => {
  const advisories = []
  const severityMap = {
    'critical': 1,
    'high': 2,
    'moderate': 3,
    'low': 4
  }
  if (typeof severityMap[severity] === 'undefined') {
    throw(new Error(`severity value not supported: ${severity}`))
  }
  Object.keys(report.advisories).forEach(key => {
    const adv = report.advisories[key]
    if (severityMap[adv.severity] <= severityMap[severity]) {
      advisories.push(adv)
    }
  })
  return advisories
}
